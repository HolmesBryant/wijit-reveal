/**
 * @class WijitReveal
 * @description A web component that reveals content based on a toggle mechanism.
 * @author Holmes Bryant <https://github.com/HolmesBryant>
 * @license GPL-3.0
 */
export class WijitReveal extends HTMLElement{abortController=new AbortController;#t=!1;#e=".5rem";#i="45px";#s="row";#o="start";#a="1s";#n=!0;static allowed={active:new Set([null,!0,!1,"","true","false"]),position:new Set(["center","end","start","stretch"]),orient:new Set(["column","column-reverse","row","row-reverse"]),toggle:new Set([null,!0,!1,"","true","false"])};static observedAttributes=["active","gap","width","orient","position","speed","toggle"];constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML=` <style> :host {--gap: ${this.gap}; --width: ${this.width}; --orient: ${this.orient}; --position: ${this.position}; --speed: ${this.speed}; position: relative; } slot[name="icon"]::slotted(*) {height: 100%; width: 100%; object-fit: cover; } input + #icon:hover {box-shadow: 2px 2px 5px black; } input + #icon:active {box-shadow: inset 2px 2px 5px black; } label {cursor: pointer; flex: 0; min-height: var(--width); min-width: var(--width); } label:has(input) ~ #content {flex: 0 1 0%; opacity: 0; overflow: hidden; transition: all var(--speed); width: 100%; max-height: 0vh; } label:has(input:checked) ~ #content {flex: 2 1 100%; max-height: 100vh; opacity: 1; } main {align-items: var(--position); display: flex; flex-direction: var(--orient); gap: var(--gap); } span {display: block; } svg {height: 100%; width: 100%; } #icon {height: var(--width); width: 100%; } #icon.row.stretch, #icon.row-reverse.stretch {height: 100%; } </style> <main part="main"> <label aria-label="menu" title="menu" part="icon"> <input hidden type="checkbox"> <span id="icon" class="${this.orient} ${this.position}"> <slot name="icon"> <svg viewBox="0 6 12 12" preserveAspectRatio="none"> <path fill="currentColor" d="M0 6H20V8H0V6zM0 11H20V13H0V11zM0 16H20V18H0V16z"/> </svg> </slot> </span> </label> <div id="content" part="content"> <slot></slot> </div> </main> `,this.shadowRoot.querySelector("input").addEventListener("change",(t=>{t.target.checked?this.setAttribute("active",""):this.removeAttribute("active")}),{signal:this.abortController.signal})}attributeChangedCallback(t,e,i){if(WijitReveal.allowed[t]&&!WijitReveal.allowed[t].has(i)){const e=JSON.stringify(Array.from(WijitReveal.allowed[t].values()));return console.error(`Value of "${t}" must be one of ${e}. Value given was: ${i}`),!1}this[t]=i,this.sendEvent(t,e,i)}connectedCallback(){this.addClickhandler(),this.addDocumentClickHandler()}disconnectedCallback(){this.abortController.abort()}sendEvent(t,e,i){const s=new CustomEvent("wijitChanged",{detail:{attr:t,old:e,new:i}});window.dispatchEvent(s)}addClickhandler(){this.addEventListener("click",(t=>{"a"===t.target.localName&&t.target.href&&this.toggle&&this.removeAttribute("active")}),{signal:this.abortController.signal}),this.addEventListener("blur",(t=>{this.toggle&&this.removeAttribute("active")}),{signal:this.abortController.signal})}addDocumentClickHandler(){document.body.addEventListener("click",(t=>{let e=!1;(t.target===this||this.contains(t.target))&&(e=!0),!e&&this.toggle&&this.removeAttribute("active")}))}get active(){return this.#t}set active(t){const e=this.shadowRoot.querySelector("input");switch(t){case"false":case null:case!1:t=!1,e.checked&&(e.checked=!1);break;default:t=!0,e.checked||(e.checked=!0)}this.#t=t}get gap(){return this.#e}set gap(t){this.#e=t,this.style.setProperty("--gap",t)}get width(){return this.#i}set width(t){this.#i=t,this.style.setProperty("--width",t)}get orient(){return this.#s}set orient(t){const e=this.shadowRoot.querySelector("#icon");this.#s=t,this.style.setProperty("--orient",t);for(const t of WijitReveal.allowed.orient)e&&e.classList.remove(t);e.classList.add(t)}get position(){return this.#o}set position(t){const e=this.shadowRoot.querySelector("#icon");this.#o=t,this.style.setProperty("--position",t);for(const t of WijitReveal.allowed.position)e.classList.remove(t);e&&e.classList.add(t)}get speed(){return this.#a}set speed(t){/\d+$/.test(t)&&(t+="s"),this.#a=t,this.style.setProperty("--speed",t)}get toggle(){return this.#n}set toggle(t){switch(t){case!1:case"false":t=!1;break;default:t=!0}this.#n=t}}document.addEventListener("DOMContentLoaded",(()=>{customElements.get("wijit-reveal")||customElements.define("wijit-reveal",WijitReveal)}));
